% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runLPJ.R
\name{runLPJ}
\alias{runLPJ}
\title{The function to run the LPJ-GUESS in parallel}
\usage{
runLPJ(x, settings, typeList = NULL, parameterList = NULL)
}
\arguments{
\item{x}{either a LPJSetup object created with the setupLPJParallel function or a
character string indicating the path to the directory where
the model link and template are located, and in which the function will create
the directory structure for the outputs.}

\item{settings}{additional parameters \itemize{
\item  gridList a character string providing the name of the text file with
the grids to be included in the model, e.g, gridlist.txt. It must be in the mainDir.
Provide only the file name, not the path.
\item mode a character string indicating whether using cru or cf data
\item scale a character string indicating whether the model runs global or
for europe
\item file.co2 a character string providing the absolute path to the C02 input file
\item file.cru a character string providing the absolute path to the cru input file
\item file.cru.misc a character string providing the absolute path to the cru
 misc  input file
\item file.ndep a character string providing the absolute path to the nitrogen
 deposition input file
\item file.temp a character string providing the absolute path to the temperature
 input file
\item file.prec a character string providing the absolute path to the
precipitation input file
\item file.insol a character string providing the absolute path to the
 insolation input file
\item file.wetdays a character string providing the absolute path to the
 wetdays input file
\item file.minTemp a character string providing the absolute path to the
 minimum temperature input file
\item file.maxTemp a character string providing the absolute path to the
 maximum temperature input file
\item variable.temp a character string providing the variable name of the
temperature input file
\item variable.prec a character string providing the variable name of the
precipitacion input file
\item variable.insol a character string providing the variable name of the
insolation input file
\item variable.wetdays a character string providing the variable name of the
wetdays input file
\item variable.minTemp a character string providing the variable name of the
minimum temperature input file
\item variable.maxTemp a character string providing the variable name of the
maximum temperature input file
\item template1  character string providing the general model template,
 e.g, global.ins. It must be in the mainDir. Provide only the file name,
  not the path. If not provided, package templates will be used.
\item template2 a character string providing the  "specific" model template,
 e.g, global_cf.ins or global_cru.ins. It must be in the mainDir. Provide
 only the file name, not the path. If not provided, package templates will be
  used.
\item plot.data  a boolean indicating whether the ouput data will be plotted
 (default FALSE)
\item save.plots  a boolean indicating whether the plots will be saved (default
 FALSE)
\item processing a boolean indicating whether output files will be turned into zoo
 time series (default FALSE). This is only supported when running the model
 for one grid cell. For several grid cells, please set processing to FALSE.
\item parallel a character string providing the parallel strategy. If grids, it will
parallelize grids. If parameters, it will parallelize parameters. If both, it will
parallelize both grids and parameters. If auto, it will decided the strategy based
on the provided parameterList and gridList. Default value is auto
\item delete a boolean indicating whether output files should be deleted after
 processing (default TRUE). Saved plots will not be deleted.
\item save a boolean indicating whether function outputs should be saved as RData
into an output directory named (runInfoDir_DATE). Default is TRUE.
\item runID an integer after which the output directory will be named (default empty).
If parallel TRUE, ID is ignored and defined by setupLPJParallel.
\item design a named list containing the general parameters for LPJ-GUESS.
See function \code{\link{getDesign}} for default values and examples.
}}

\item{typeList}{a character vector with the outputs to be analyzed.
Default value is all outputs.}

\item{parameterList}{either a named list containing the parameters to be calibrated
or a matrix. If running in parallel, parameter list should be either a list of of list or
a matrix where each row is a parameter combination and the column names should be named
after the parameters. See  fucntion \code{\link{getParameterList}}) for default values.}
}
\value{
an object of class \linkS4class{LPJData} The \linkS4class{LPJData} object
 will be automatically stored as RData in a folder in the mainDir. The folder
 will be named as runInfo plus the date in format %Y_%m_%d_%H%M%S.
}
\description{
This function allows to run the LPJ-GUESS model serial
or parallel. It returns the model outputs as a \linkS4class{LPJData} object,
 which can also be stored as RData.
}
\details{
The runLPJ in parallel assumes the existence of a folder the model templates
 for LPJ-GUESS (optional) and link to the model executable: mainDir.
Running the LPJ-GUESS in parallel involves two steps. First, to create a parallel
setup (\code{\link{setupLPJParallel}}), and second, to actually run the model
(\code{\link{runLPJ}}).  The parallelization requires the package \emph{snow} for SOCK clusters or
the package \emph{Rmpi} for MPI clusters.
}
\section{Model templates}{

It is not mandatory to provide the model templates. The package contais model templates
(see \code{\link{getTemplate}}) and will write them with the specified information
 (input files, design, parameters).
If you decided to provide templates to \code{\link{runLPJ}}, you can either use
 the package ones or a self edited templates. The package assumes a specific
 coding for writing the parameters values, design options and input files paths.
 For this reason, we recommend to use the package templates.
Yet, if you want to use self edited templates, please take the package templates
 as a reference (see \code{\link{getTemplate}}).
}

\section{Warning}{

When using MPI clusters, please call the function \code{\link{exitMPI}}
before terminating your R session.
}

\examples{
\dontrun{
### Settings and options ###

# main directory
mainDir <- "/some/absolute/path/mainDir"
list.files(mainDir)
  [1] "guess" or "guesscmd.exe"  # link to the model executable
  [2] "gridlist.txt"      # list of gridcells
  [3] "global.ins"        # template1 (optional)
  [4] "global_cru.ins"    # template2 (optional)

# Input files
file.co2<-"/some/absolute/path/crudata/co2_1901-2013.txt"
file.cru <- "/some/absolute/path/crudata/cru_1901_2006.bin"
file.cru.misc <- "/some/absolute/path/crudata/cru_1901_2006misc.bin"
file.ndep <- "/some/absolute/path/crudata/GlobalNitrogenDeposition.bin"
file.temp <- "/some/absolute/path/cfdata/temp.nc"
file.prec <- "/some/absolute/path/cfdata/prec.nc"
file.insol <- "/some/absolute/path/cfdata/rad.nc"

# General settings
settings <- list (gridList = gridList,mode = "cf", scale = "global",
               file.co2 = file.co2, file.cru = file.cru,
               file.cru.misc = file.cru.misc, file.ndep = file.ndep,
               file.temp = file.temp, file.prec = file.prec,
               file.insol = file.insol, delete = FALSE)

# (Optional) Modify design
  # Obtain the standard design
designLPJ <- getDesign(scaleLPJ, list = TRUE)

  # Modify the desired options
designLPJ$run_vegmode <- "cohort"
designLPJ$run_ifcentury <- 0
designLPJ$run_iffire <- 0
designLPJ$run_ifnlim <- 0

  # Add to settings
settings$design <- designLPJ

### Single  Run ###
result <-  runLPJ(x=mainDir, settings=settings)
result
    class              : LPJData
    LPJ template 1     : global.ins
    LPJ template 2     : global_cf.ins
    grid cells         : 99  Somewhere
    run directory      : /some/absolute/path/mainDir/runDirectory
    LPJ model outputs  : 39 outputs
    aaet agpp aiso amon anpp cflux clitter cmass cpool cton_leaf dens
    firert fpc speciesheight lai maet mevap mgpp mintercep miso mlai mmon
    mnee mnpp mpet mra mrh mrunoff mwcont_lower mwcont_upper nflux ngases
    nlitter nmass npool nsources nuptake runoff vmaxnlim


### Parallel Run ###

# Create some paramaters to test the model.
# Number of runs is proportional to number of parameter being testet
parameterDefault <- list (run_emax = NULL)

# Test 6 different values for emax.
par <- seq(1,5, len = 6)
# Create the list object with the parameters
parameterList <- vector("list", length(par))
for (i in 1:length(par)) {
  parameterDefault$run_emax <- par[i]
  parameterList[[i]] <- parameterDefault
}

# Call setupParallel
mySetup <- setupLPJParallel(numCores=3, clusterType="SOCK", mainDir=mainDir)

# Call runLPJ
result <- runLPJ(x=mySetup, settings=settings, parameterList=parameterList)
str(result,1)
  List of 6
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots
  $ :Formal class 'LPJData' [package "rLPJGUESS"] with 2 slots


}
}
\seealso{
\url{https://cran.r-project.org/web/packages/Rmpi/Rmpi.pdf},
 \url{https://cran.r-project.org/web/packages/snow/snow.pdf},
 \code{\link{setupLPJParallel}}, \code{\link{exitMPI}}, \linkS4class{LPJData},
 \linkS4class{LPJSetup}, \code{\link{getParameterList}}, \code{\link{getDesign}}
}
\author{
Ramiro Silveyra Gonzalez, Maurizio Bagnara, Florian Hartig
}
\keyword{rLPJGUESS}
